sudo rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
sudo yum -y install ansible
sudo yum install python-pip
sudo pip install boto
sudo pip install boto3

vim ~/.boto

[Credentials]
aws_access_key_id = AKIAVCT5TI6ETDCN6NOO
aws_secret_access_key = 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

vim hosts

[local]
localhost

[webserver]

scp -i ./newAdmin.pem ./newAdmin.pem ec2-user@ec2-3-92-205-88.compute-1.amazonaws.com:/home/ec2-user

ansible-playbook -i hosts <yml>

ssh -i ~/new ec2-user@ec2-100-25-131-196.compute-1.amazonaws.com



---
  - name: Provision an EC2 Instance
    hosts: local
    connection: local
    gather_facts: False
    tags: provisioning
    # Necessary Variables for creating/provisioning the EC2 Instance
    vars:
      instance_type: t2.micro # Select which type of Instance you need
      security_group: webserver # Set the Security Group name
      image: ami-0f9cf087c1f27d9b1 # Change the AMI, from which you want to launch the server ( For testing I am using Ubuntu AMI)
      region: us-east-1 # Selet the Region where you want to launch the instance
      keypair: newAdmin # Make sure you have crated the keypair on aws and your passing here private key name
      count: 1  # Number of instances to launch
      volumes:
              - device_name: /dev/sda1
                volume_size: 40
                volume_type: gp2  ## you can specify here different types

    # Task that will be used to Launch/Create an EC2 Instance
    tasks:

      - name: Create a security group
        local_action:
          module: ec2_group
          name: "{{ security_group }}"
          description: Security Group for webserver Servers
          region: "{{ region }}"
          rules:
            - proto: tcp
              from_port: 22
              to_port: 22
              cidr_ip: 0.0.0.0/0
            - proto: tcp
              from_port: 80
              to_port: 80
              cidr_ip: 0.0.0.0/0
          rules_egress:
            - proto: all
              cidr_ip: 0.0.0.0/0

      - name: Launch the new EC2 Instance
        local_action: ec2
                      group={{ security_group }}
                      instance_type={{ instance_type}}
                      image={{ image }}
                      wait=true
                      region={{ region }}
                      keypair={{ keypair }}
                      count={{count}}
                      volumes={{volumes}}
        register: ec2

      - name: Add the newly created EC2 instance(s) to the local host group (located inside the directory)
        local_action: lineinfile
                      dest="./hosts"
                      regexp={{ item.public_ip }}
                      insertafter="[webserver]" line={{ item.public_ip }}
        with_items: "{{ ec2.instances }}"

      - name: Wait for SSH to come up
        local_action: wait_for
                      host={{ item.public_ip }}
                      port=22
                      state=started
        with_items: "{{ ec2.instances }}"

      - name: Add tag to Instance(s)
        local_action: ec2_tag resource={{ item.id }} region={{ region }} state=present
        with_items: "{{ ec2.instances }}"
        args:
          tags:
            Name: webserver



---

- hosts: local
  connection: local
  vars:
    region: us-east-1
  tasks:
    - name: Gather EC2 facts
      ec2_instance_facts:
        region: "{{ region }}"
        filters:
          "tag:Name": "webserver"
      register: ec2
    - debug: var=ec2

    - name: Terminate EC2 Instance(s)
      ec2:
        instance_ids: '{{ item.instance_id }}'
        state: absent
        region: "{{ region }}"
      with_items: "{{ ec2.instances }}"







# Ansible playbook AWS - install docker
---
- name: "AWS - Install docker"
  hosts: aws-docker-vms
  become: yes
  tasks:
    - name: Update all packages
      yum:
        name: '*'
        state: latest
        update_only: yes

    - name: Ensure a list of yum packages are installed
      yum:
        name: "{{ packages }}"
        state: latest
        update_cache: yes
      vars:
        packages:
        - python-pip
        - yum-utils
        - device-mapper-persistent-data
        - lvm2
        - amazon-linux-extras

    - name: Add extras repository
      shell: yum-config-manager --enable extras

    - name: Install docker-ce (centos) via amazon-linux-extras packages
      shell: "amazon-linux-extras install docker=18.06.1 -y"

    - name: Enable Docker CE service at startup
      service:
        name: docker
        state: started
        enabled: yes

    - name: Ensure Python pip packages are installed
      pip:
        name: "{{ packages }}"
      vars:
        packages:
        - boto
        - boto3
        - docker-compose